openapi: 3.0.1
info:
  title: Kwitter
  version: "1.0.0"
servers:
  - url: http://localhost:3000
    description: localhost
  - url: https://kwitter-api.herokuapp.com
    description: Production Server
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        displayName:
          type: string
        about:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - username
        - displayName
        - about
        - createdAt
        - updatedAt
    Like:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        messageId:
          type: integer
        createdAt:
          type: string
      required:
        - id
        - userId
        - messageId
        - createdAt
    Message:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        userId:
          type: integer
        createdAt:
          type: string
        likes:
          type: array
          items:
            $ref: "#/components/schemas/Like"
      required:
        - id
        - text
        - userId
        - createdAt
        - likes
    ValidationErrors:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              type:
                type: string
              path:
                type: string
              value:
                type: string
              origin:
                type: string
              instance:
                type: object
              validatorKeys:
                type: string
              validatorName:
                type: string
                nullable: true
              validatorArgs:
                type: array
                items:
                  type: object
            required:
              - message
              - type
              - path
              - value
              - origin
              - instance
              - validatorKeys
              - validatorName
              - validatorArgs
      required:
        - errors
    DatabaseError:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    AuthError:
      type: string
      example: Unauthorized
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  parameters:
    limitParam:
      name: limit
      in: query
      description: Number of items to return
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 100
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
paths:
  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  id:
                    type: integer
                  token:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message

  /auth/logout:
    get:
      summary: Logout a user
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                required:
                  - success
                  - message
  /auth/register:
    post:
      summary: "Register a new user"
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                displayName:
                  type: string
                password:
                  type: string
              required:
                - username
                - displayName
                - password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  displayName:
                    type: string
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
  /likes:
    post:
      summary: Add Like
      tags:
        - Likes
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  like:
                    $ref: "#/components/schemas/Like"
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
  /likes/{likeId}:
    delete:
      summary: Remove Like
      tags:
        - Likes
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: likeId
          schema:
            type: integer
          required: true
          description: id of the like to remove
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
  /messages:
    get:
      summary: Get a list of messages
      tags:
        - Messages
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of messages to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of messages to return
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/Message"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
    post:
      summary: Create a message
      tags:
        - Messages
      security:
        - bearerAuth: []
      requestBody:
        description: The message to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/Message"
                required:
                  - message
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
  /messages/{messageId}:
    get:
      summary: Get a message
      tags:
        - Messages
      parameters:
        - in: path
          name: messageId
          schema:
            type: integer
          required: true
          description: id of the message to get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/Message"
                    nullable: true
                required:
                  - message
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
    delete:
      summary: Delete a message
      tags:
        - Messages
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          schema:
            type: integer
          required: true
          description: id of the message to delete
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
  /users:
    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"

    get:
      summary: Get a list of users
      tags:
        - Users
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of users to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of users to return
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
    patch:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        description: The user updates
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                about:
                  type: string
                displayName:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationErrors"
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
  /users/{userId}:
    get:
      summary: Get a user
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The id of the user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                    nullable: true
                required:
                  - user
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
  /users/picture:
    put:
      summary: Set user's picture
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        description: Picture data that is one of gif, jpeg, png
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
              required:
                - picture
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
  /users/{userId}/picture:
    get:
      summary: Get a user's picture
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The id of the user

      responses:
        200:
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatabaseError"
