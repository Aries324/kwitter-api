openapi: 3.0.1
info:
  title: Kwitter
  version: "1.0.0"
servers:
  - url: http://localhost:3000
    description: localhost
  - url: https://kwitter-api.herokuapp.com
    description: Production Server
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        displayName:
          type: string
        about:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - username
        - displayName
        - about
        - createdAt
        - updatedAt
    Like:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        messageId:
          type: integer
        createdAt:
          type: string
      required:
        - id
        - userId
        - messageId
        - createdAt
    Message:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        userId:
          type: integer
        createdAt:
          type: string
        likes:
          type: array
          items:
            $ref: "#/components/schemas/Like"
      required:
        - id
        - text
        - userId
        - createdAt
        - likes
    OperationalError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
          minimum: 400
          maximum: 599
      required:
        - message
        - statusCode
    AuthError:
      type: string
      example: Unauthorized
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  parameters:
    limitParam:
      name: limit
      in: query
      description: Number of items to return
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 100
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
paths:
  /auth/login:
    post:
      summary: Login user
      operationId: login
      x-controller: auth
      x-operation: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  token:
                    type: string
                required:
                  - id
                  - token
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /auth/logout:
    get:
      summary: Logout a user
      operationId: logout
      x-controller: auth
      x-operation: logout
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                required:
                  - success
                  - message
  /auth/register:
    post:
      summary: Register a new user
      operationId: register
      x-controller: auth
      x-operation: register
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 20
                displayName:
                  type: string
                  minLength: 3
                  maxLength: 20
                password:
                  type: string
                  minLength: 3
                  maxLength: 20
              required:
                - username
                - displayName
                - password
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  displayName:
                    type: string
                required:
                  - username
                  - displayName
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /likes:
    post:
      summary: Add Like
      operationId: addLike
      x-controller: likes
      x-operation: addLike
      tags:
        - Likes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messageId:
                  type: integer
              required:
                - messageId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  like:
                    $ref: "#/components/schemas/Like"
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
  /likes/{likeId}:
    delete:
      summary: Remove Like
      operationId: removeLike
      x-controller: likes
      x-operation: removeLike
      tags:
        - Likes
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: likeId
          schema:
            type: integer
          required: true
          description: id of the like to remove
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                required:
                  - id
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /messages:
    get:
      summary: Get a list of messages
      operationId: getMessages
      x-controller: messages
      x-operation: getMessages
      tags:
        - Messages
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of messages to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of messages to return
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: "#/components/schemas/Message"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    post:
      summary: Create a message
      operationId: createMessage
      x-controller: messages
      x-operation: createMessage
      tags:
        - Messages
      security:
        - bearerAuth: []
      requestBody:
        description: The message to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  minLength: 2
                  maxLength: 255
              required:
                - text
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/Message"
                required:
                  - message
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
  /messages/{messageId}:
    get:
      summary: Get a message
      operationId: getMessage
      x-controller: messages
      x-operation: getMessage
      tags:
        - Messages
      parameters:
        - in: path
          name: messageId
          schema:
            type: integer
          required: true
          description: id of the message to get
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/Message"
                    nullable: true
                required:
                  - message
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    delete:
      summary: Delete a message
      operationId: deleteMessage
      x-controller: messages
      x-operation: deleteMessage
      tags:
        - Messages
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: messageId
          schema:
            type: integer
          required: true
          description: id of the message to delete
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                required:
                  - id
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /users:
    delete:
      summary: Delete user
      operationId: deleteUser
      x-controller: users
      x-operation: deleteUser
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                required:
                  - id
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
    get:
      summary: Get a list of users
      operationId: getUsers
      x-controller: users
      x-operation: getUsers
      tags:
        - Users
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of users to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of users to return
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
    patch:
      summary: Update user
      operationId: updateUser
      x-controller: users
      x-operation: updateUser
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        description: The user updates
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: ## todo: is there a way to required at least one of these with openapi?
                password:
                  type: string
                  minLength: 3
                  maxLength: 20
                about:
                  type: string
                  minLength: 0
                  maxLength: 255
                displayName:
                  type: string
                  minLength: 3
                  maxLength: 20
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                required:
                  - user
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
  /users/{userId}:
    get:
      summary: Get a user
      operationId: getUser
      x-controller: users
      x-operation: getUser
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The id of the user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                    nullable: true
                required:
                  - user
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /users/picture:
    put:
      summary: Set user's picture
      operationId: setUserPicture
      x-controller: users
      x-operation: setUserPicture
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        description: Picture data that is one of gif, jpeg, png
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
              required:
                - picture
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AuthError"
        415:
          description: Unsupported Media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
  /users/{userId}/picture:
    get:
      summary: Get a user's picture
      operationId: getUserPicture
      x-controller: users
      x-operation: getUserPicture
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: The id of the user
      responses:
        200:
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationalError"
